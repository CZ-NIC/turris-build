From a75ca779ab01b3aaeca7103856561fdd6fc91a73 Mon Sep 17 00:00:00 2001
From: Michal Hrusecky <Michal@Hrusecky.net>
Date: Wed, 27 Dec 2017 17:19:45 +0100
Subject: [PATCH] kernel: Add Turris 1.X support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Tested on Turris 1.1 and works, but might break other mpc boards, so might need
some polishing.

Signed-off-by: Michal Hrusecky <Michal@Hrusecky.net>
Signed-off-by: Karel Kočí <karel.koci@nic.cz>
---
 .../mpc85xx/base-files/etc/board.d/02_network |   4 +
 .../arch/powerpc/boot/dts/turris-nand-bch.dts |  27 ++
 .../arch/powerpc/boot/dts/turris.dtsi         | 322 ++++++++++++++++++
 target/linux/mpc85xx/p2020/profiles/turris.mk |  29 ++
 ...sl_elbc-add-support-for-software-ecc.patch | 223 ++++++++++++
 ...a8k-extend-slave-bus-implementations.patch | 235 +++++++++++++
 6 files changed, 840 insertions(+)
 create mode 100644 target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris-nand-bch.dts
 create mode 100644 target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris.dtsi
 create mode 100644 target/linux/mpc85xx/p2020/profiles/turris.mk
 create mode 100644 target/linux/mpc85xx/patches-4.19/230-mtd-rawnand-fsl_elbc-add-support-for-software-ecc.patch
 create mode 100644 target/linux/mpc85xx/patches-4.19/233-net-dsa-qca8k-extend-slave-bus-implementations.patch

diff --git a/target/linux/mpc85xx/base-files/etc/board.d/02_network b/target/linux/mpc85xx/base-files/etc/board.d/02_network
index f907fd2..aaef1cb 100755
--- a/target/linux/mpc85xx/base-files/etc/board.d/02_network
+++ b/target/linux/mpc85xx/base-files/etc/board.d/02_network
@@ -23,6 +23,10 @@ tplink,tl-wdr4900-v1)
 		"0@eth0" "2:lan:1" "3:lan:2" "4:lan:3" "5:lan:4" "1:wan"
 	ucidef_set_interface_macaddr "wan" "$(mtd_get_mac_binary config 0x14c)"
 	;;
+fsl,P2020RDB)
+	ucidef_set_interface_lan "lan1 lan2 lan3 lan4 lan5"
+	ucidef_set_interface_wan "eth2"
+	;;
 *)
 	ucidef_set_interfaces_lan_wan "eth0" "eth1"
 	;;
diff --git a/target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris-nand-bch.dts b/target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris-nand-bch.dts
new file mode 100644
index 0000000..59ef5fd
--- /dev/null
+++ b/target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris-nand-bch.dts
@@ -0,0 +1,27 @@
+/*
+ * Turris RDB Device Tree Source
+ *
+ * Copyright 2013 CZ.NIC z.s.p.o. (http://www.nic.cz/)
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/include/ "turris.dtsi"
+
+&lbc {
+	nand@1,0 {
+		nand-ecc-mode = "soft";
+		nand-ecc-algo = "bch";
+	};
+};
+
+/*
+&soc {
+	sdhc@2e000 {
+		status = "disabled";
+	};
+};
+*/
diff --git a/target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris.dtsi b/target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris.dtsi
new file mode 100644
index 0000000..03c8fc5
--- /dev/null
+++ b/target/linux/mpc85xx/files-4.19/arch/powerpc/boot/dts/turris.dtsi
@@ -0,0 +1,322 @@
+/*
+ * Turris RDB Device Tree Source
+ *
+ * Copyright 2013 CZ.NIC z.s.p.o. (http://www.nic.cz/)
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ */
+
+/include/ "fsl/p2020si-pre.dtsi"
+
+/ {
+	model = "Turris";
+	compatible = "fsl,P2020RDB";
+
+	aliases {
+		ethernet0 = &enet0;
+		ethernet1 = &enet1;
+		ethernet2 = &enet2;
+		serial0 = &serial0;
+		serial1 = &serial1;
+		pci0 = &pci0;
+		pci1 = &pci1;
+		pci2 = &pci2;
+		spi0 = &spi0;
+	};
+
+	memory {
+		device_type = "memory";
+	};
+
+	lbc: localbus@ffe05000 {
+		reg = <0 0xffe05000 0 0x1000>;
+
+		/* NOR and NAND Flashes */
+		ranges = <0x0 0x0 0x0 0xef000000 0x01000000
+			  0x1 0x0 0x0 0xff800000 0x00040000
+			  0x3 0x0 0x0 0xffa00000 0x00100000>;
+			  /* 0x2 0x0 0x0 0xffb00000 0x00020000>; */
+
+		nor@0,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "cfi-flash";
+			reg = <0x0 0x0 0x1000000>;
+			bank-width = <2>;
+			device-width = <1>;
+
+			partitions {
+				compatible = "fixed-partitions";
+				#address-cells = <1>;
+				#size-cells = <1>;
+
+				partition@0 {
+					/* 128KB for DTB Image */
+					reg = <0x0 0x00020000>;
+					label = "NOR (RO) DTB Image";
+				};
+
+				partition@20000 {
+					/* 1.7 MB for Linux Kernel Image */
+					reg = <0x00020000 0x1A0000>;
+					label = "NOR (RO) Linux Kernel Image";
+				};
+
+				partition@1C0000 {
+					/* 1.5 MB for JFFS2 based Root file System */
+					reg = <0x001C0000 0x180000>;
+					label = "NOR (RO) JFFS2 Root File System";
+				};
+
+				partition@340000 {
+					/* for nand fw backup */
+					reg = <0x00340000 0xb00000>;
+					label = "NOR (RO) NAND FW backup";
+				};
+
+				partition@E40000 {
+					/* 128KB for Certificates backup */
+					reg = <0xE40000 0x000C0000>;
+					label = "NOR (RW) Cert backup";
+				};
+
+				partition@f00000 {
+					/* This location must not be altered  */
+					/* 512KB for u-boot Bootloader Image */
+					/* 512KB for u-boot Environment Variables */
+					reg = <0x00f00000 0x00100000>;
+					label = "NOR (RO) U-Boot Image";
+				};
+			};
+		};
+
+		nand@1,0 {
+			#address-cells = <1>;
+			#size-cells = <1>;
+			compatible = "fsl,p2020-fcm-nand",
+				     "fsl,elbc-fcm-nand";
+			reg = <0x1 0x0 0x00040000>;
+
+			partitions {
+				compatible = "fixed-partitions";
+				#address-cells = <1>;
+				#size-cells = <1>;
+
+				partition@0 {
+					/* 2MB for DTB Image */
+					reg = <0x00000000 0x00200000>;
+					label = "NAND (RW) DTB Image";
+				};
+
+				partition@200000 {
+					/* 5MB for Linux Kernel Image */
+					reg = <0x00200000 0x00500000>;
+					label = "NAND (RW) Linux Kernel Image";
+				};
+
+				partition@700000 {
+					/* 249MB for JFFS2 based Root file System */
+					reg = <0x00700000 0xF900000>;
+					label = "NAND (RW) JFFS2 Root File System";
+				};
+
+				partition@00 {
+					reg = <0x00000000 0x10000000>;
+					label = "rootfs-ubifs";
+				};
+			};
+		};
+
+/*		led-controller@3,0 {
+			compatible = "cznic,turris-leds";
+			reg = <0x3 0x0 0x30>;
+		};*/
+	};
+
+	soc: soc@ffe00000 {
+		ranges = <0x0 0x0 0xffe00000 0x100000>;
+
+		i2c@3000 {
+			rtc@6f {
+				compatible = "mcp7940x";
+				reg = <0x6f>;
+			};
+			lm90@4c {
+				compatible = "sa56004";
+				reg = <0x4c>;
+			};
+		};
+
+		spi0: spi@7000 {
+/*			spidev@0 {
+				compatible = "spidev";
+				spi-max-frequency = <40000000>;
+				reg = <0>;
+			};
+			spidev@1 {
+				compatible = "spidev";
+				spi-max-frequency = <40000000>;
+				reg = <1>;
+			};
+			spidev@2 {
+				compatible = "spidev";
+				spi-max-frequency = <40000000>;
+				reg = <2>;
+			};
+			spidev@3 {
+				compatible = "spidev";
+				spi-max-frequency = <40000000>;
+				reg = <3>;
+			};*/
+		};
+
+		usb@22000 {
+			phy_type = "ulpi";
+			dr_mode = "host";
+		};
+
+		mdio@24520 {
+			switch0@10 {
+				compatible = "qca,qca8337";
+				#size-cells = <0>;
+				#address-cells = <1>;
+				reg = <0x10>;
+
+				ports {
+					#address-cells = <1>;
+					#size-cells = <0>;
+
+					port@0 {
+						reg = <0>;
+						label = "cpu";
+						ethernet = <&enet1>;
+						phy-mode = "rgmii";
+						fixed-link {
+							speed = <1000>;
+							full-duplex;
+						};
+					};
+
+					port@1 {
+						reg = <1>;
+						label = "lan5";
+					};
+
+					port@2 {
+						reg = <2>;
+						label = "lan4";
+					};
+
+					port@3 {
+						reg = <3>;
+						label = "lan3";
+					};
+
+					port@4 {
+						reg = <4>;
+						label = "lan2";
+					};
+
+					port@5 {
+						reg = <5>;
+						label = "lan1";
+					};
+				};
+			};
+
+			phy7: ethernet-phy@7 {
+				interrupts = <3 1 0 0>;
+				reg = <0x7>;
+			};
+		};
+
+		mdio@25520 {
+			status = "disabled";
+		};
+	
+		mdio@26520 {
+			status = "disabled";
+		};
+
+
+		ptp_clock@24e00 {
+			fsl,tclk-period = <5>;
+			fsl,tmr-prsc = <200>;
+			fsl,tmr-add = <0xCCCCCCCD>;
+			fsl,tmr-fiper1 = <0x3B9AC9FB>;
+			fsl,tmr-fiper2 = <0x0001869B>;
+			fsl,max-adj = <249999999>;
+		};
+
+		enet0: ethernet@24000 {
+			phy-connection-type = "rgmii-id";
+			fixed-link {
+				speed = <1000>;
+				full-duplex;
+			};
+		};
+
+		enet1: ethernet@25000 {
+			phy-connection-type = "rgmii-id";
+			fixed-link {
+				speed = <1000>;
+				full-duplex;
+			};
+		};
+
+		enet2: ethernet@26000 {
+			phy-handle = <&phy7>;
+			phy-connection-type = "rgmii-id";
+		};
+	};
+	pci2: pcie@ffe08000 {
+		ranges = <0x2000000 0x0 0xc0000000 0 0xc0000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc20000 0x0 0x10000>;
+		reg = <0 0xffe08000 0 0x1000>;
+		pcie@0 {
+			ranges = <0x2000000 0x0 0xc0000000
+				  0x2000000 0x0 0xc0000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x10000>;
+		};
+	};
+
+	pci1: pcie@ffe09000 {
+		ranges = <0x2000000 0x0 0xa0000000 0 0xa0000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc10000 0x0 0x10000>;
+		reg = <0 0xffe09000 0 0x1000>;
+		pcie@0 {
+			ranges = <0x2000000 0x0 0xa0000000
+				  0x2000000 0x0 0xa0000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x10000>;
+		};
+	};
+
+	pci0: pcie@ffe0a000 {
+		ranges = <0x2000000 0x0 0x80000000 0 0x80000000 0x0 0x20000000
+			  0x1000000 0x0 0x00000000 0 0xffc00000 0x0 0x10000>;
+		reg = <0 0xffe0a000 0 0x1000>;
+		pcie@0 {
+			ranges = <0x2000000 0x0 0x80000000
+				  0x2000000 0x0 0x80000000
+				  0x0 0x20000000
+
+				  0x1000000 0x0 0x0
+				  0x1000000 0x0 0x0
+				  0x0 0x10000>;
+		};
+	};
+
+};
+
+/include/ "fsl/p2020si-post.dtsi"
diff --git a/target/linux/mpc85xx/p2020/profiles/turris.mk b/target/linux/mpc85xx/p2020/profiles/turris.mk
new file mode 100644
index 0000000..e7c4048
--- /dev/null
+++ b/target/linux/mpc85xx/p2020/profiles/turris.mk
@@ -0,0 +1,29 @@
+JFFS2_BLOCKSIZE := 128k
+FEATURES += rtc nand ubifs -squashfs
+NAND_BLOCKSIZE := 2048:128k
+TURRISNAND_DTS:="turris-bch"
+TURRISNAND_UBIFS_OPTS:="-m 2048 -e 124KiB -c 2000 -F"
+TURRISNAND_UBI_OPTS:="-m 2048 -p 128KiB -s 2048"
+KERNEL_PATCHVER:=4.19
+KERNELNAME:=zImage turris-nand-bch.dtb
+
+define Profile/TURRIS
+	NAME:=Turris 1.X
+	PACKAGES:=\
+		kmod-usb-core kmod-usb2 kmod-usb2-fsl \
+		kmod-ath9k kmod-hostapd kmod-usb3 wpad \
+		kmod-usb-storage uboot-turris \
+		block-mount kmod-hwmon-core kmod-hwmon-lm90 \
+		nuci updater unbound oneshot logrotate \
+		mtd-utils mtd-utils-nandwrite start-indicator \
+		mtd-utils-flash-erase mtd-utils-flash-eraseall mtd-utils-flash-info \
+		luci luci-i18n-czech cert-backup foris update_mac wget \
+		userspace_time_sync openssh-moduli watchdog_adjust \
+		ucollect-config rainbow turris-version \
+		spidev-test i2c-tools -dropbear
+endef
+
+define Profile/TURRIS/Description
+	Package set optimized for the Turris 1.X.
+endef
+$(eval $(call Profile,TURRIS))
diff --git a/target/linux/mpc85xx/patches-4.19/230-mtd-rawnand-fsl_elbc-add-support-for-software-ecc.patch b/target/linux/mpc85xx/patches-4.19/230-mtd-rawnand-fsl_elbc-add-support-for-software-ecc.patch
new file mode 100644
index 0000000..0400c09
--- /dev/null
+++ b/target/linux/mpc85xx/patches-4.19/230-mtd-rawnand-fsl_elbc-add-support-for-software-ecc.patch
@@ -0,0 +1,223 @@
+diff --git a/drivers/mtd/nand/raw/fsl_elbc_nand.c b/drivers/mtd/nand/raw/fsl_elbc_nand.c
+index 55f449b711fd..941dbe898bc2 100644
+--- a/drivers/mtd/nand/raw/fsl_elbc_nand.c
++++ b/drivers/mtd/nand/raw/fsl_elbc_nand.c
+@@ -355,6 +355,14 @@ static void fsl_elbc_cmdfunc(struct mtd_info *mtd, unsigned int command,
+ 		fsl_elbc_run_command(mtd);
+ 		return;
+ 
++	case NAND_CMD_RNDOUT:
++		dev_vdbg(priv->dev,
++			 "fsl_elbc_cmdfunc: NAND_CMD_RNDOUT, column: 0x%x.\n",
++			 column);
++
++		elbc_fcm_ctrl->index = column;
++		return;
++
+ 	/* READOOB reads only the OOB because no ECC is performed. */
+ 	case NAND_CMD_READOOB:
+ 		dev_vdbg(priv->dev,
+@@ -637,79 +645,6 @@ static int fsl_elbc_wait(struct mtd_info *mtd, struct nand_chip *chip)
+ 	return (elbc_fcm_ctrl->mdr & 0xff) | NAND_STATUS_WP;
+ }
+ 
+-static int fsl_elbc_attach_chip(struct nand_chip *chip)
+-{
+-	struct mtd_info *mtd = nand_to_mtd(chip);
+-	struct fsl_elbc_mtd *priv = nand_get_controller_data(chip);
+-	struct fsl_lbc_ctrl *ctrl = priv->ctrl;
+-	struct fsl_lbc_regs __iomem *lbc = ctrl->regs;
+-	unsigned int al;
+-
+-	/* calculate FMR Address Length field */
+-	al = 0;
+-	if (chip->pagemask & 0xffff0000)
+-		al++;
+-	if (chip->pagemask & 0xff000000)
+-		al++;
+-
+-	priv->fmr |= al << FMR_AL_SHIFT;
+-
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->numchips = %d\n",
+-	        chip->numchips);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chipsize = %lld\n",
+-	        chip->chipsize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->pagemask = %8x\n",
+-	        chip->pagemask);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_delay = %d\n",
+-	        chip->chip_delay);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->badblockpos = %d\n",
+-	        chip->badblockpos);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_shift = %d\n",
+-	        chip->chip_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->page_shift = %d\n",
+-	        chip->page_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->phys_erase_shift = %d\n",
+-	        chip->phys_erase_shift);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.mode = %d\n",
+-	        chip->ecc.mode);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.steps = %d\n",
+-	        chip->ecc.steps);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.bytes = %d\n",
+-	        chip->ecc.bytes);
+-	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.total = %d\n",
+-	        chip->ecc.total);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->ooblayout = %p\n",
+-		mtd->ooblayout);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->flags = %08x\n", mtd->flags);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->size = %lld\n", mtd->size);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->erasesize = %d\n",
+-	        mtd->erasesize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->writesize = %d\n",
+-	        mtd->writesize);
+-	dev_dbg(priv->dev, "fsl_elbc_init: mtd->oobsize = %d\n",
+-	        mtd->oobsize);
+-
+-	/* adjust Option Register and ECC to match Flash page size */
+-	if (mtd->writesize == 512) {
+-		priv->page_size = 0;
+-		clrbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
+-	} else if (mtd->writesize == 2048) {
+-		priv->page_size = 1;
+-		setbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
+-	} else {
+-		dev_err(priv->dev,
+-		        "fsl_elbc_init: page size %d is not supported\n",
+-		        mtd->writesize);
+-		return -ENOTSUPP;
+-	}
+-
+-	return 0;
+-}
+-
+-static const struct nand_controller_ops fsl_elbc_controller_ops = {
+-	.attach_chip = fsl_elbc_attach_chip,
+-};
+-
+ static int fsl_elbc_read_page(struct mtd_info *mtd, struct nand_chip *chip,
+ 			      uint8_t *buf, int oob_required, int page)
+ {
+@@ -791,27 +726,108 @@ static int fsl_elbc_chip_init(struct fsl_elbc_mtd *priv)
+ 	chip->controller = &elbc_fcm_ctrl->controller;
+ 	nand_set_controller_data(chip, priv);
+ 
+-	chip->ecc.read_page = fsl_elbc_read_page;
+-	chip->ecc.write_page = fsl_elbc_write_page;
+-	chip->ecc.write_subpage = fsl_elbc_write_subpage;
+-
+-	/* If CS Base Register selects full hardware ECC then use it */
+-	if ((in_be32(&lbc->bank[priv->bank].br) & BR_DECC) ==
+-	    BR_DECC_CHK_GEN) {
+-		chip->ecc.mode = NAND_ECC_HW;
+-		mtd_set_ooblayout(mtd, &fsl_elbc_ooblayout_ops);
+-		chip->ecc.size = 512;
+-		chip->ecc.bytes = 3;
+-		chip->ecc.strength = 1;
++	return 0;
++}
++
++static int fsl_elbc_attach_chip(struct nand_chip *chip)
++{
++	struct mtd_info *mtd = nand_to_mtd(chip);
++	struct fsl_elbc_mtd *priv = nand_get_controller_data(chip);
++	struct fsl_lbc_ctrl *ctrl = priv->ctrl;
++	struct fsl_lbc_regs __iomem *lbc = ctrl->regs;
++	unsigned int al;
++
++	switch (chip->ecc.mode) {
++	case NAND_ECC_NONE:
++		/* If CS Base Register selects full hardware ECC then use it */
++		if ((in_be32(&lbc->bank[priv->bank].br) & BR_DECC) ==
++		    BR_DECC_CHK_GEN) {
++			chip->ecc.read_page = fsl_elbc_read_page;
++			chip->ecc.write_page = fsl_elbc_write_page;
++			chip->ecc.write_subpage = fsl_elbc_write_subpage;
++
++			chip->ecc.mode = NAND_ECC_HW;
++			mtd_set_ooblayout(mtd, &fsl_elbc_ooblayout_ops);
++			chip->ecc.size = 512;
++			chip->ecc.bytes = 3;
++			chip->ecc.strength = 1;
++		} else {
++			/* otherwise fall back to default software ECC */
++			chip->ecc.mode = NAND_ECC_SOFT;
++			chip->ecc.algo = NAND_ECC_HAMMING;
++		}
++		break;
++	case NAND_ECC_SOFT:
++		break;
++	default:
++		return -EINVAL;
++	}
++
++	/* calculate FMR Address Length field */
++	al = 0;
++	if (chip->pagemask & 0xffff0000)
++		al++;
++	if (chip->pagemask & 0xff000000)
++		al++;
++
++	priv->fmr |= al << FMR_AL_SHIFT;
++
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->numchips = %d\n",
++	        chip->numchips);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->chipsize = %lld\n",
++	        chip->chipsize);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->pagemask = %8x\n",
++	        chip->pagemask);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_delay = %d\n",
++	        chip->chip_delay);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->badblockpos = %d\n",
++	        chip->badblockpos);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->chip_shift = %d\n",
++	        chip->chip_shift);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->page_shift = %d\n",
++	        chip->page_shift);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->phys_erase_shift = %d\n",
++	        chip->phys_erase_shift);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.mode = %d\n",
++	        chip->ecc.mode);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.steps = %d\n",
++	        chip->ecc.steps);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.bytes = %d\n",
++	        chip->ecc.bytes);
++	dev_dbg(priv->dev, "fsl_elbc_init: nand->ecc.total = %d\n",
++	        chip->ecc.total);
++	dev_dbg(priv->dev, "fsl_elbc_init: mtd->ooblayout = %p\n",
++		mtd->ooblayout);
++	dev_dbg(priv->dev, "fsl_elbc_init: mtd->flags = %08x\n", mtd->flags);
++	dev_dbg(priv->dev, "fsl_elbc_init: mtd->size = %lld\n", mtd->size);
++	dev_dbg(priv->dev, "fsl_elbc_init: mtd->erasesize = %d\n",
++	        mtd->erasesize);
++	dev_dbg(priv->dev, "fsl_elbc_init: mtd->writesize = %d\n",
++	        mtd->writesize);
++	dev_dbg(priv->dev, "fsl_elbc_init: mtd->oobsize = %d\n",
++	        mtd->oobsize);
++
++	/* adjust Option Register and ECC to match Flash page size */
++	if (mtd->writesize == 512) {
++		priv->page_size = 0;
++		clrbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
++	} else if (mtd->writesize == 2048) {
++		priv->page_size = 1;
++		setbits32(&lbc->bank[priv->bank].or, OR_FCM_PGS);
+ 	} else {
+-		/* otherwise fall back to default software ECC */
+-		chip->ecc.mode = NAND_ECC_SOFT;
+-		chip->ecc.algo = NAND_ECC_HAMMING;
++		dev_err(priv->dev,
++		        "fsl_elbc_init: page size %d is not supported\n",
++		        mtd->writesize);
++		return -ENOTSUPP;
+ 	}
+ 
+ 	return 0;
+ }
+ 
++static const struct nand_controller_ops fsl_elbc_controller_ops = {
++	.attach_chip = fsl_elbc_attach_chip,
++};
++
+ static int fsl_elbc_chip_remove(struct fsl_elbc_mtd *priv)
+ {
+ 	struct fsl_elbc_fcm_ctrl *elbc_fcm_ctrl = priv->ctrl->nand;
diff --git a/target/linux/mpc85xx/patches-4.19/233-net-dsa-qca8k-extend-slave-bus-implementations.patch b/target/linux/mpc85xx/patches-4.19/233-net-dsa-qca8k-extend-slave-bus-implementations.patch
new file mode 100644
index 0000000..d5aca2e
--- /dev/null
+++ b/target/linux/mpc85xx/patches-4.19/233-net-dsa-qca8k-extend-slave-bus-implementations.patch
@@ -0,0 +1,235 @@
+From ee910c90b118cbfe376d59997210363687181798 Mon Sep 17 00:00:00 2001
+From: Christian Lamparter <chunkeey@gmail.com>
+Date: Fri, 22 Mar 2019 01:05:03 +0100
+Subject: [PATCH 4/4] net: dsa: qca8k: extend slave-bus implementations
+
+This patch implements accessors for the QCA8337 MDIO access
+through the MDIO_MASTER register, which makes it possible to
+access the PHYs on slave-bus through the switch. In cases
+where the switch ports are already mapped via external
+"phy-phandles", the internal mdio-bus is disabled in order to
+prevent a duplicated discovery and enumeration of the same
+PHYs. Don't use mixed external and internal mdio-bus
+configurations, as this is not supported by the hardware.
+
+Signed-off-by: Christian Lamparter <chunkeey@gmail.com>
+---
+ drivers/net/dsa/qca8k.c | 156 +++++++++++++++++++++++++++++++++++++++-
+ drivers/net/dsa/qca8k.h |  13 ++++
+ 2 files changed, 168 insertions(+), 1 deletion(-)
+
+diff --git a/drivers/net/dsa/qca8k.c b/drivers/net/dsa/qca8k.c
+index bdd8f2df6630..d8d30470feab 100644
+--- a/drivers/net/dsa/qca8k.c
++++ b/drivers/net/dsa/qca8k.c
+@@ -477,6 +477,155 @@ qca8k_port_set_status(struct qca8k_priv *priv, int port, int enable)
+ 		qca8k_reg_clear(priv, QCA8K_REG_PORT_STATUS(port), mask);
+ }
+ 
++static u32
++qca8k_port_to_phy(int port)
++{
++	/* From Andrew Lunn:
++	 * Port 0 has no internal phy.
++	 * Port 1 has an internal PHY at MDIO address 0.
++	 * Port 2 has an internal PHY at MDIO address 1.
++	 * ...
++	 * Port 5 has an internal PHY at MDIO address 4.
++	 * Port 6 has no internal PHY.
++	 */
++
++	return port - 1;
++}
++
++static int
++qca8k_mdio_write(struct qca8k_priv *priv, int port, u32 regnum, u16 data)
++{
++	u32 phy, val;
++
++	if (regnum >= QCA8K_MDIO_MASTER_MAX_REG)
++		return -EINVAL;
++
++	/* callee is responsible for not passing bad ports,
++	 * but we still would like to make spills impossible.
++	 */
++	phy = qca8k_port_to_phy(port) % PHY_MAX_ADDR;
++	val = QCA8K_MDIO_MASTER_BUSY | QCA8K_MDIO_MASTER_EN |
++	      QCA8K_MDIO_MASTER_WRITE | QCA8K_MDIO_MASTER_PHY_ADDR(phy) |
++	      QCA8K_MDIO_MASTER_REG_ADDR(regnum) |
++	      QCA8K_MDIO_MASTER_DATA(data);
++
++	qca8k_write(priv, QCA8K_MDIO_MASTER_CTRL, val);
++
++	return qca8k_busy_wait(priv, QCA8K_MDIO_MASTER_CTRL,
++		QCA8K_MDIO_MASTER_BUSY);
++}
++
++static int
++qca8k_mdio_read(struct qca8k_priv *priv, int port, u32 regnum)
++{
++	u32 phy, val;
++
++	if (regnum >= QCA8K_MDIO_MASTER_MAX_REG)
++		return -EINVAL;
++
++	/* callee is responsible for not passing bad ports,
++	 * but we still would like to make spills impossible.
++	 */
++	phy = qca8k_port_to_phy(port) % PHY_MAX_ADDR;
++	val = QCA8K_MDIO_MASTER_BUSY | QCA8K_MDIO_MASTER_EN |
++	      QCA8K_MDIO_MASTER_READ | QCA8K_MDIO_MASTER_PHY_ADDR(phy) |
++	      QCA8K_MDIO_MASTER_REG_ADDR(regnum);
++
++	qca8k_write(priv, QCA8K_MDIO_MASTER_CTRL, val);
++
++	if (qca8k_busy_wait(priv, QCA8K_MDIO_MASTER_CTRL,
++			    QCA8K_MDIO_MASTER_BUSY))
++		return -ETIMEDOUT;
++
++	val = (qca8k_read(priv, QCA8K_MDIO_MASTER_CTRL) &
++		QCA8K_MDIO_MASTER_DATA_MASK);
++
++	return val;
++}
++
++static int
++qca8k_phy_write(struct dsa_switch *ds, int port, int regnum, u16 data)
++{
++	struct qca8k_priv *priv = ds->priv;
++
++	return qca8k_mdio_write(priv, port, regnum, data);
++}
++
++static int
++qca8k_phy_read(struct dsa_switch *ds, int port, int regnum)
++{
++	struct qca8k_priv *priv = ds->priv;
++	int ret;
++
++	ret = qca8k_mdio_read(priv, port, regnum);
++
++	if (ret < 0)
++		return 0xffff;
++
++	return ret;
++}
++
++static int
++qca8k_setup_mdio_bus(struct qca8k_priv *priv)
++{
++	u32 internal_mdio_mask = 0, external_mdio_mask = 0, reg;
++	struct device_node *ports, *port;
++	int err;
++
++	ports = of_get_child_by_name(priv->dev->of_node, "ports");
++	if (!ports)
++		return -EINVAL;
++
++	for_each_available_child_of_node(ports, port) {
++		err = of_property_read_u32(port, "reg", &reg);
++		if (err)
++			return err;
++
++		if (!dsa_is_user_port(priv->ds, reg))
++			continue;
++
++		if (of_property_read_bool(port, "phy-handle"))
++			external_mdio_mask |= BIT(reg);
++		else
++			internal_mdio_mask |= BIT(reg);
++	}
++
++	if (!external_mdio_mask && !internal_mdio_mask) {
++		dev_err(priv->dev, "no PHYs are defined.\n");
++		return -EINVAL;
++	}
++
++	/* The QCA8K_MDIO_MASTER_EN Bit, which grants access to PHYs through
++	 * the MDIO_MASTER register also _disconnects_ the external MDC
++	 * passthrough to the internal PHYs. It's not possible to use both
++	 * configurations at the same time!
++	 *
++	 * Because this came up during the review process:
++	 * If the external mdio-bus driver is capable magically disabling
++	 * the QCA8K_MDIO_MASTER_EN and mutex/spin-locking out the qca8k's
++	 * accessors for the time being, it would be possible to pull this
++	 * off.
++	 */
++	if (!!external_mdio_mask && !!internal_mdio_mask) {
++		dev_err(priv->dev, "either internal or external mdio bus configuration is supported.\n");
++		return -EINVAL;
++	}
++
++	if (external_mdio_mask) {
++		/* Make sure to disable the internal mdio bus in cases
++		 * a dt-overlay and driver reload changed the configuration
++		 */
++
++		qca8k_reg_clear(priv, QCA8K_MDIO_MASTER_CTRL,
++				QCA8K_MDIO_MASTER_EN);
++		return 0;
++	}
++
++	priv->ops.phy_read = qca8k_phy_read;
++	priv->ops.phy_write = qca8k_phy_write;
++	return 0;
++}
++
+ static int
+ qca8k_setup(struct dsa_switch *ds)
+ {
+@@ -498,6 +647,10 @@ qca8k_setup(struct dsa_switch *ds)
+ 	if (IS_ERR(priv->regmap))
+ 		pr_warn("regmap initialization failed");
+ 
++	ret = qca8k_setup_mdio_bus(priv);
++	if (ret)
++		return ret;
++
+ 	/* Initialize CPU port pad mode (xMII type, delays...) */
+ 	phy_mode = of_get_phy_mode(ds->ports[QCA8K_CPU_PORT].dn);
+ 	if (phy_mode < 0) {
+@@ -902,7 +1055,8 @@ qca8k_sw_probe(struct mdio_device *mdiodev)
+ 		return -ENOMEM;
+ 
+ 	priv->ds->priv = priv;
+-	priv->ds->ops = &qca8k_switch_ops;
++	priv->ops = qca8k_switch_ops;
++	priv->ds->ops = &priv->ops;
+ 	mutex_init(&priv->reg_mutex);
+ 	dev_set_drvdata(&mdiodev->dev, priv);
+ 
+diff --git a/drivers/net/dsa/qca8k.h b/drivers/net/dsa/qca8k.h
+index 613fe5c50236..38d06661f0a8 100644
+--- a/drivers/net/dsa/qca8k.h
++++ b/drivers/net/dsa/qca8k.h
+@@ -48,6 +48,18 @@
+ #define   QCA8K_MIB_FLUSH				BIT(24)
+ #define   QCA8K_MIB_CPU_KEEP				BIT(20)
+ #define   QCA8K_MIB_BUSY				BIT(17)
++#define QCA8K_MDIO_MASTER_CTRL				0x3c
++#define   QCA8K_MDIO_MASTER_BUSY			BIT(31)
++#define   QCA8K_MDIO_MASTER_EN				BIT(30)
++#define   QCA8K_MDIO_MASTER_READ			BIT(27)
++#define   QCA8K_MDIO_MASTER_WRITE			0
++#define   QCA8K_MDIO_MASTER_SUP_PRE			BIT(26)
++#define   QCA8K_MDIO_MASTER_PHY_ADDR(x)			((x) << 21)
++#define   QCA8K_MDIO_MASTER_REG_ADDR(x)			((x) << 16)
++#define   QCA8K_MDIO_MASTER_DATA(x)			(x)
++#define   QCA8K_MDIO_MASTER_DATA_MASK			GENMASK(15, 0)
++#define   QCA8K_MDIO_MASTER_MAX_PORTS			5
++#define   QCA8K_MDIO_MASTER_MAX_REG			32
+ #define QCA8K_GOL_MAC_ADDR0				0x60
+ #define QCA8K_GOL_MAC_ADDR1				0x64
+ #define QCA8K_REG_PORT_STATUS(_i)			(0x07c + (_i) * 4)
+@@ -168,6 +180,7 @@ struct qca8k_priv {
+ 	struct dsa_switch *ds;
+ 	struct mutex reg_mutex;
+ 	struct device *dev;
++	struct dsa_switch_ops ops;
+ };
+ 
+ struct qca8k_mib_desc {
+-- 
+2.19.2
+
-- 
2.22.1

